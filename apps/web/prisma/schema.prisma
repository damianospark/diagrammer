// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js v5 models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  billingProfile BillingProfile?
  orgMembers    OrgMember[]
  auditLogs     AuditLog[]
}

// Billing and subscription
model BillingProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?  @unique
  email             String?  // Stripe에서 보강
  plan              Plan     @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  renewedAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Organization management
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  plan        Plan     @default(FREE)
  status      OrgStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     OrgMember[]
  auditLogs   AuditLog[]
}

model OrgMember {
  id             String   @id @default(cuid())
  orgId          String
  userId         String
  role           OrgRole  @default(MEMBER)
  joinedAt       DateTime @default(now())

  org            Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
}

// Audit and logging
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  resourceId  String?
  userId      String?
  orgId       String?
  metadata    Json?
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])
  org         Organization? @relation(fields: [orgId], references: [id])
}

// Feature flags
model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  enabled     Boolean  @default(false)
  rollout     Int      @default(0) // 0-100%
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enums
enum Role {
  USER
  ADMIN
  OWNER
}

enum Plan {
  FREE
  PRO
  TEAM
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum OrgStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum OrgRole {
  MEMBER
  ADMIN
  OWNER
}